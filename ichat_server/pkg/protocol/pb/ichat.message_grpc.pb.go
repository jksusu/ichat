// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	MessageSync(ctx context.Context, in *MessageSyncRequest, opts ...grpc.CallOption) (*MessageSyncResponse, error)
	MessageRecall(ctx context.Context, in *MessageRecallRequest, opts ...grpc.CallOption) (*MessageRecallResponse, error)
	MessageAck(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*MessageAckResponse, error)
	MessageResp(ctx context.Context, in *MessageRespRequest, opts ...grpc.CallOption) (*MessageRespResponse, error)
	TalkToUser(ctx context.Context, in *TalkToUserRequest, opts ...grpc.CallOption) (*TalkToUserResponse, error)
	TalkToGroup(ctx context.Context, in *TalkToGroupRequest, opts ...grpc.CallOption) (*TalkToGroupResponse, error)
	TalkToRoom(ctx context.Context, in *TalkToRoomRequest, opts ...grpc.CallOption) (*TalkToRoomResponse, error)
	// 通知
	NoticeToUser(ctx context.Context, in *NoticeToUserRequest, opts ...grpc.CallOption) (*NoticeToUserResponse, error)
	NoticeToGroup(ctx context.Context, in *NoticeToGroupRequest, opts ...grpc.CallOption) (*NoticeToGroupResponse, error)
	// 会话
	SessionListGet(ctx context.Context, in *SessionListGetRequest, opts ...grpc.CallOption) (*SessionListGetResponse, error)
	SessionRemove(ctx context.Context, in *SessionRemoveRequest, opts ...grpc.CallOption) (*SessionRemoveResponse, error)
	SessionSetting(ctx context.Context, in *SessionSettingRequest, opts ...grpc.CallOption) (*SessionSettingResponse, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) MessageSync(ctx context.Context, in *MessageSyncRequest, opts ...grpc.CallOption) (*MessageSyncResponse, error) {
	out := new(MessageSyncResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/MessageSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) MessageRecall(ctx context.Context, in *MessageRecallRequest, opts ...grpc.CallOption) (*MessageRecallResponse, error) {
	out := new(MessageRecallResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/MessageRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) MessageAck(ctx context.Context, in *MessageAckRequest, opts ...grpc.CallOption) (*MessageAckResponse, error) {
	out := new(MessageAckResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/MessageAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) MessageResp(ctx context.Context, in *MessageRespRequest, opts ...grpc.CallOption) (*MessageRespResponse, error) {
	out := new(MessageRespResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/MessageResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) TalkToUser(ctx context.Context, in *TalkToUserRequest, opts ...grpc.CallOption) (*TalkToUserResponse, error) {
	out := new(TalkToUserResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/TalkToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) TalkToGroup(ctx context.Context, in *TalkToGroupRequest, opts ...grpc.CallOption) (*TalkToGroupResponse, error) {
	out := new(TalkToGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/TalkToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) TalkToRoom(ctx context.Context, in *TalkToRoomRequest, opts ...grpc.CallOption) (*TalkToRoomResponse, error) {
	out := new(TalkToRoomResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/TalkToRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) NoticeToUser(ctx context.Context, in *NoticeToUserRequest, opts ...grpc.CallOption) (*NoticeToUserResponse, error) {
	out := new(NoticeToUserResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/NoticeToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) NoticeToGroup(ctx context.Context, in *NoticeToGroupRequest, opts ...grpc.CallOption) (*NoticeToGroupResponse, error) {
	out := new(NoticeToGroupResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/NoticeToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SessionListGet(ctx context.Context, in *SessionListGetRequest, opts ...grpc.CallOption) (*SessionListGetResponse, error) {
	out := new(SessionListGetResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/SessionListGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SessionRemove(ctx context.Context, in *SessionRemoveRequest, opts ...grpc.CallOption) (*SessionRemoveResponse, error) {
	out := new(SessionRemoveResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/SessionRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SessionSetting(ctx context.Context, in *SessionSettingRequest, opts ...grpc.CallOption) (*SessionSettingResponse, error) {
	out := new(SessionSettingResponse)
	err := c.cc.Invoke(ctx, "/pb.Message/SessionSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	MessageSync(context.Context, *MessageSyncRequest) (*MessageSyncResponse, error)
	MessageRecall(context.Context, *MessageRecallRequest) (*MessageRecallResponse, error)
	MessageAck(context.Context, *MessageAckRequest) (*MessageAckResponse, error)
	MessageResp(context.Context, *MessageRespRequest) (*MessageRespResponse, error)
	TalkToUser(context.Context, *TalkToUserRequest) (*TalkToUserResponse, error)
	TalkToGroup(context.Context, *TalkToGroupRequest) (*TalkToGroupResponse, error)
	TalkToRoom(context.Context, *TalkToRoomRequest) (*TalkToRoomResponse, error)
	// 通知
	NoticeToUser(context.Context, *NoticeToUserRequest) (*NoticeToUserResponse, error)
	NoticeToGroup(context.Context, *NoticeToGroupRequest) (*NoticeToGroupResponse, error)
	// 会话
	SessionListGet(context.Context, *SessionListGetRequest) (*SessionListGetResponse, error)
	SessionRemove(context.Context, *SessionRemoveRequest) (*SessionRemoveResponse, error)
	SessionSetting(context.Context, *SessionSettingRequest) (*SessionSettingResponse, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) MessageSync(context.Context, *MessageSyncRequest) (*MessageSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSync not implemented")
}
func (UnimplementedMessageServer) MessageRecall(context.Context, *MessageRecallRequest) (*MessageRecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRecall not implemented")
}
func (UnimplementedMessageServer) MessageAck(context.Context, *MessageAckRequest) (*MessageAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAck not implemented")
}
func (UnimplementedMessageServer) MessageResp(context.Context, *MessageRespRequest) (*MessageRespResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageResp not implemented")
}
func (UnimplementedMessageServer) TalkToUser(context.Context, *TalkToUserRequest) (*TalkToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkToUser not implemented")
}
func (UnimplementedMessageServer) TalkToGroup(context.Context, *TalkToGroupRequest) (*TalkToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkToGroup not implemented")
}
func (UnimplementedMessageServer) TalkToRoom(context.Context, *TalkToRoomRequest) (*TalkToRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkToRoom not implemented")
}
func (UnimplementedMessageServer) NoticeToUser(context.Context, *NoticeToUserRequest) (*NoticeToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeToUser not implemented")
}
func (UnimplementedMessageServer) NoticeToGroup(context.Context, *NoticeToGroupRequest) (*NoticeToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeToGroup not implemented")
}
func (UnimplementedMessageServer) SessionListGet(context.Context, *SessionListGetRequest) (*SessionListGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionListGet not implemented")
}
func (UnimplementedMessageServer) SessionRemove(context.Context, *SessionRemoveRequest) (*SessionRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRemove not implemented")
}
func (UnimplementedMessageServer) SessionSetting(context.Context, *SessionSettingRequest) (*SessionSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionSetting not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_MessageSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).MessageSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/MessageSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).MessageSync(ctx, req.(*MessageSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_MessageRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).MessageRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/MessageRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).MessageRecall(ctx, req.(*MessageRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_MessageAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).MessageAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/MessageAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).MessageAck(ctx, req.(*MessageAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_MessageResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRespRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).MessageResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/MessageResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).MessageResp(ctx, req.(*MessageRespRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_TalkToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TalkToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).TalkToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/TalkToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).TalkToUser(ctx, req.(*TalkToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_TalkToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TalkToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).TalkToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/TalkToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).TalkToGroup(ctx, req.(*TalkToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_TalkToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TalkToRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).TalkToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/TalkToRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).TalkToRoom(ctx, req.(*TalkToRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_NoticeToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).NoticeToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/NoticeToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).NoticeToUser(ctx, req.(*NoticeToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_NoticeToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).NoticeToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/NoticeToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).NoticeToGroup(ctx, req.(*NoticeToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SessionListGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionListGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SessionListGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/SessionListGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SessionListGet(ctx, req.(*SessionListGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SessionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SessionRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/SessionRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SessionRemove(ctx, req.(*SessionRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SessionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SessionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Message/SessionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SessionSetting(ctx, req.(*SessionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageSync",
			Handler:    _Message_MessageSync_Handler,
		},
		{
			MethodName: "MessageRecall",
			Handler:    _Message_MessageRecall_Handler,
		},
		{
			MethodName: "MessageAck",
			Handler:    _Message_MessageAck_Handler,
		},
		{
			MethodName: "MessageResp",
			Handler:    _Message_MessageResp_Handler,
		},
		{
			MethodName: "TalkToUser",
			Handler:    _Message_TalkToUser_Handler,
		},
		{
			MethodName: "TalkToGroup",
			Handler:    _Message_TalkToGroup_Handler,
		},
		{
			MethodName: "TalkToRoom",
			Handler:    _Message_TalkToRoom_Handler,
		},
		{
			MethodName: "NoticeToUser",
			Handler:    _Message_NoticeToUser_Handler,
		},
		{
			MethodName: "NoticeToGroup",
			Handler:    _Message_NoticeToGroup_Handler,
		},
		{
			MethodName: "SessionListGet",
			Handler:    _Message_SessionListGet_Handler,
		},
		{
			MethodName: "SessionRemove",
			Handler:    _Message_SessionRemove_Handler,
		},
		{
			MethodName: "SessionSetting",
			Handler:    _Message_SessionSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ichat.message.proto",
}
